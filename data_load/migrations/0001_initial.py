# Generated by Django 4.2.5 on 2024-03-30 10:10

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AuthGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=150, unique=True)),
            ],
            options={
                "db_table": "auth_group",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthGroupPermissions",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                "db_table": "auth_group_permissions",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthPermission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("codename", models.CharField(max_length=100)),
            ],
            options={
                "db_table": "auth_permission",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128)),
                ("last_login", models.DateTimeField(blank=True, null=True)),
                ("is_superuser", models.IntegerField()),
                ("username", models.CharField(max_length=150, unique=True)),
                ("first_name", models.CharField(max_length=150)),
                ("last_name", models.CharField(max_length=150)),
                ("email", models.CharField(max_length=254)),
                ("is_staff", models.IntegerField()),
                ("is_active", models.IntegerField()),
                ("date_joined", models.DateTimeField()),
            ],
            options={
                "db_table": "auth_user",
                "ordering": ("id",),
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthUserGroups",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                "db_table": "auth_user_groups",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthUserUserPermissions",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                "db_table": "auth_user_user_permissions",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DataLoadProfile",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                "db_table": "data_load_profile",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DataLoadProfileUserprofileindianstations",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("profile_id", models.BigIntegerField()),
                ("indianstations_id", models.BigIntegerField()),
            ],
            options={
                "db_table": "data_load_profile_userProfileIndianStations",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DataLoadProfileUserprofilestations",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("profile_id", models.BigIntegerField()),
                ("ffwcstations2023_id", models.BigIntegerField()),
            ],
            options={
                "db_table": "data_load_profile_userProfileStations",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoAdminLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("action_time", models.DateTimeField()),
                ("object_id", models.TextField(blank=True, null=True)),
                ("object_repr", models.CharField(max_length=200)),
                ("action_flag", models.PositiveSmallIntegerField()),
                ("change_message", models.TextField()),
            ],
            options={
                "db_table": "django_admin_log",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoContentType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("app_label", models.CharField(max_length=100)),
                ("model", models.CharField(max_length=100)),
            ],
            options={
                "db_table": "django_content_type",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoMigrations",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("app", models.CharField(max_length=255)),
                ("name", models.CharField(max_length=255)),
                ("applied", models.DateTimeField()),
            ],
            options={
                "db_table": "django_migrations",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoSession",
            fields=[
                (
                    "session_key",
                    models.CharField(max_length=40, primary_key=True, serialize=False),
                ),
                ("session_data", models.TextField()),
                ("expire_date", models.DateTimeField()),
            ],
            options={
                "db_table": "django_session",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Feedback",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("email", models.CharField(max_length=200)),
                ("comments", models.CharField(max_length=1000)),
            ],
            options={
                "db_table": "feedback",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="FfwcLastUpdateDate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("last_update_date", models.DateField(unique=True)),
                ("entry_date", models.DateTimeField()),
            ],
            options={
                "db_table": "ffwc_last_update_date",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="FfwcRainfallStations",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50, unique=True)),
                ("title", models.CharField(max_length=50)),
                ("basin_order", models.IntegerField()),
                ("basin", models.CharField(max_length=150)),
                ("unit", models.CharField(max_length=10)),
                ("union", models.CharField(blank=True, max_length=50, null=True)),
                ("upazilla", models.CharField(blank=True, max_length=50, null=True)),
                ("district", models.CharField(blank=True, max_length=50, null=True)),
                ("lat_wgs84", models.DecimalField(decimal_places=8, max_digits=12)),
                ("long_wgs84", models.DecimalField(decimal_places=8, max_digits=12)),
                ("station_order", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Rainfall Station",
                "verbose_name_plural": "Rainfall Stations",
                "db_table": "ffwc_rainfall_stations",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="FfwcStations",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("coords", models.CharField(max_length=100)),
                ("name", models.CharField(max_length=100)),
                ("river", models.CharField(max_length=50)),
                ("basin_order", models.IntegerField()),
                ("basin", models.CharField(max_length=100)),
                (
                    "dangerlevel",
                    models.DecimalField(
                        blank=True,
                        db_column="dangerLevel",
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "riverhighestwaterlevel",
                    models.DecimalField(
                        blank=True,
                        db_column="riverHighestWaterLevel",
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "avglandlevel",
                    models.DecimalField(
                        blank=True,
                        db_column="avgLandLevel",
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "river_chainage",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("division", models.CharField(max_length=100)),
                ("district", models.CharField(max_length=100)),
                ("upazilla", models.CharField(max_length=100)),
                ("union", models.CharField(max_length=100)),
                ("long", models.DecimalField(decimal_places=6, max_digits=10)),
                ("order_up_down", models.IntegerField(blank=True, null=True)),
                ("lat", models.DecimalField(decimal_places=6, max_digits=10)),
                ("forecast_observation", models.IntegerField()),
                ("status", models.IntegerField()),
                ("station_order", models.IntegerField(blank=True, null=True)),
                ("medium_range_station", models.IntegerField()),
                ("jason_2_satellie_station", models.IntegerField()),
                ("unit_id", models.IntegerField()),
            ],
            options={
                "verbose_name": "FFWC Stations",
                "verbose_name_plural": "FFWC Stations",
                "db_table": "ffwc_stations",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="FfwcStations2023",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("coords", models.CharField(max_length=100)),
                ("name", models.CharField(max_length=100)),
                ("river", models.CharField(max_length=50)),
                ("basin_order", models.IntegerField()),
                ("basin", models.CharField(max_length=100)),
                (
                    "dangerlevel",
                    models.DecimalField(
                        blank=True,
                        db_column="dangerLevel",
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "riverhighestwaterlevel",
                    models.DecimalField(
                        blank=True,
                        db_column="riverHighestWaterLevel",
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "avglandlevel",
                    models.DecimalField(
                        blank=True,
                        db_column="avgLandLevel",
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "river_chainage",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("division", models.CharField(max_length=100)),
                ("district", models.CharField(max_length=100)),
                ("upazilla", models.CharField(max_length=100)),
                ("union", models.CharField(max_length=100)),
                ("long", models.DecimalField(decimal_places=6, max_digits=10)),
                ("order_up_down", models.IntegerField(blank=True, null=True)),
                ("lat", models.DecimalField(decimal_places=6, max_digits=10)),
                ("forecast_observation", models.IntegerField()),
                ("status", models.IntegerField()),
                ("station_order", models.IntegerField(blank=True, null=True)),
                ("medium_range_station", models.IntegerField()),
                ("jason_2_satellie_station", models.IntegerField()),
                ("unit_id", models.IntegerField()),
            ],
            options={
                "verbose_name": "FFWC Stations(2023)",
                "verbose_name_plural": "FFWC Stations(2023)",
                "db_table": "ffwc_stations_2023",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="IndianStations",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("station_name", models.CharField(max_length=100)),
                ("state_name", models.CharField(max_length=100)),
                ("district", models.CharField(max_length=100)),
                ("basin_name", models.CharField(max_length=100)),
                ("river_name", models.CharField(max_length=100)),
                ("latitude", models.DecimalField(decimal_places=6, max_digits=10)),
                ("longitude", models.DecimalField(decimal_places=6, max_digits=10)),
                (
                    "division_name",
                    models.CharField(blank=True, max_length=150, null=True),
                ),
                (
                    "type_of_site",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "distance",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=10, null=True
                    ),
                ),
                (
                    "within_ganges",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "within_brahmaputra",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "within_meghna",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("station_code", models.CharField(max_length=100)),
                (
                    "dangerlevel",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=10, null=True
                    ),
                ),
                (
                    "warning_level",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=10, null=True
                    ),
                ),
                (
                    "highest_flow_level",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=10, null=True
                    ),
                ),
            ],
            options={
                "verbose_name": "Indain Stations",
                "verbose_name_plural": "Indian Sations",
                "db_table": "indian_stations",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="MonthlyRainfall",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("station_id", models.IntegerField()),
                ("month_serial", models.IntegerField()),
                ("month_name", models.CharField(max_length=15)),
                ("unit", models.CharField(blank=True, max_length=10, null=True)),
                ("max_rainfall", models.DecimalField(decimal_places=2, max_digits=8)),
                (
                    "normal_rainfall",
                    models.DecimalField(decimal_places=2, max_digits=8),
                ),
                ("min_rainfall", models.DecimalField(decimal_places=2, max_digits=8)),
            ],
            options={
                "verbose_name": "Monthly Rainfall",
                "verbose_name_plural": "Monthly Rainfalls",
                "db_table": "monthly_rainfall",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="RainfallObservations",
            fields=[
                ("rf_id", models.AutoField(primary_key=True, serialize=False)),
                ("st_id", models.IntegerField()),
                ("rf_date", models.DateTimeField()),
                (
                    "rainfall",
                    models.DecimalField(
                        db_column="rainFall", decimal_places=2, max_digits=8
                    ),
                ),
            ],
            options={
                "verbose_name": "Observed Rainfall",
                "verbose_name_plural": "Observed Rainfalls",
                "db_table": "rainfall_observations",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="WaterLevelForecasts",
            fields=[
                ("fc_id", models.AutoField(primary_key=True, serialize=False)),
                ("st_id", models.IntegerField()),
                ("fc_date", models.DateTimeField()),
                (
                    "waterlevel",
                    models.DecimalField(
                        db_column="waterLevel", decimal_places=2, max_digits=10
                    ),
                ),
            ],
            options={
                "verbose_name": "Waterlevel (Forecast)",
                "verbose_name_plural": "Waterlevel (Forecasts)",
                "db_table": "water_level_forecasts",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="WaterLevelObservations",
            fields=[
                ("wl_id", models.AutoField(primary_key=True, serialize=False)),
                ("st_id", models.IntegerField()),
                ("wl_date", models.DateTimeField()),
                (
                    "waterlevel",
                    models.DecimalField(
                        db_column="waterLevel", decimal_places=2, max_digits=10
                    ),
                ),
            ],
            options={
                "verbose_name": "Observed Waterlevel",
                "verbose_name_plural": "Observed Waterlevels",
                "db_table": "water_level_observations",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DataHeader",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("web_id", models.IntegerField()),
                ("station", models.CharField(max_length=100)),
                ("data_header", models.CharField(max_length=100)),
                ("name", models.CharField(max_length=100)),
            ],
            options={
                "verbose_name": "Data Header",
                "verbose_name_plural": "Data Headers",
            },
        ),
        migrations.CreateModel(
            name="UploadModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("file", models.FileField(upload_to="uploads/")),
            ],
            options={
                "verbose_name": "Upload File",
                "verbose_name_plural": "Upload Files",
            },
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "userProfileIndianStations",
                    models.ManyToManyField(
                        db_constraint=False, to="data_load.indianstations"
                    ),
                ),
                (
                    "userProfileStations",
                    models.ManyToManyField(
                        db_constraint=False, to="data_load.ffwcstations2023"
                    ),
                ),
            ],
        ),
    ]
